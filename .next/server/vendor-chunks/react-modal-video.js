"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-modal-video";
exports.ids = ["vendor-chunks/react-modal-video"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-modal-video/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-modal-video/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"(ssr)/./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.construct.js */ \"(ssr)/./node_modules/core-js/modules/es.reflect.construct.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"(ssr)/./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"(ssr)/./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"(ssr)/./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"(ssr)/./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"(ssr)/./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"(ssr)/./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"(ssr)/./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"(ssr)/./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"(ssr)/./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"(ssr)/./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"(ssr)/./node_modules/core-js/modules/es.object.get-prototype-of.js\");\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _CSSTransition = _interopRequireDefault(__webpack_require__(/*! react-transition-group/CSSTransition */ \"(ssr)/./node_modules/react-transition-group/esm/CSSTransition.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nvar ModalVideo = /*#__PURE__*/ function(_React$Component) {\n    _inherits(ModalVideo, _React$Component);\n    var _super = _createSuper(ModalVideo);\n    function ModalVideo(props) {\n        var _this;\n        _classCallCheck(this, ModalVideo);\n        _this = _super.call(this, props);\n        _this.state = {\n            isOpen: false,\n            modalVideoWidth: \"100%\"\n        };\n        _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_this));\n        _this.updateFocus = _this.updateFocus.bind(_assertThisInitialized(_this));\n        _this.timeout; // used for resizing video.\n        return _this;\n    }\n    _createClass(ModalVideo, [\n        {\n            key: \"openModal\",\n            value: function openModal() {\n                this.setState({\n                    isOpen: true\n                });\n            }\n        },\n        {\n            key: \"closeModal\",\n            value: function closeModal() {\n                this.setState({\n                    isOpen: false\n                });\n                if (typeof this.props.onClose === \"function\") {\n                    this.props.onClose();\n                }\n            }\n        },\n        {\n            key: \"keydownHandler\",\n            value: function keydownHandler(e) {\n                if (e.keyCode === 27) {\n                    this.closeModal();\n                }\n            }\n        },\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                document.addEventListener(\"keydown\", this.keydownHandler.bind(this));\n                window.addEventListener(\"resize\", this.resizeModalVideoWhenHeightGreaterThanWindowHeight.bind(this));\n                this.setState({\n                    modalVideoWidth: this.getWidthFulfillAspectRatio(this.props.ratio, window.innerHeight, window.innerWidth)\n                });\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                document.removeEventListener(\"keydown\", this.keydownHandler.bind(this));\n                window.removeEventListener(\"resize\", this.resizeModalVideoWhenHeightGreaterThanWindowHeight.bind(this));\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate() {\n                if (this.state.isOpen && this.modal) {\n                    this.modal.focus();\n                }\n            }\n        },\n        {\n            key: \"updateFocus\",\n            value: function updateFocus(e) {\n                if (this.state.isOpen) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (e.keyCode === 9) {\n                        if (this.modal === document.activeElement) {\n                            this.modaliflame.focus();\n                        } else if (this.modalbtn === document.activeElement) {\n                            this.modal.focus();\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"resizeModalVideoWhenHeightGreaterThanWindowHeight\",\n            value: function resizeModalVideoWhenHeightGreaterThanWindowHeight() {\n                var _this2 = this;\n                clearTimeout(this.timeout);\n                this.timeout = setTimeout(function() {\n                    var width = _this2.getWidthFulfillAspectRatio(_this2.props.ratio, window.innerHeight, window.innerWidth);\n                    if (_this2.state.modalVideoWidth != width) {\n                        _this2.setState({\n                            modalVideoWidth: width\n                        });\n                    }\n                }, 10);\n            }\n        },\n        {\n            key: \"getQueryString\",\n            value: function getQueryString(obj) {\n                var url = \"\";\n                for(var key in obj){\n                    if (obj.hasOwnProperty(key)) {\n                        if (obj[key] !== null) {\n                            url += \"\".concat(key, \"=\").concat(obj[key], \"&\");\n                        }\n                    }\n                }\n                return url.substr(0, url.length - 1);\n            }\n        },\n        {\n            key: \"getYoutubeUrl\",\n            value: function getYoutubeUrl(youtube, videoId) {\n                var query = this.getQueryString(youtube);\n                return \"//www.youtube.com/embed/\".concat(videoId, \"?\").concat(query);\n            }\n        },\n        {\n            key: \"getVimeoUrl\",\n            value: function getVimeoUrl(vimeo, videoId) {\n                var query = this.getQueryString(vimeo);\n                return \"//player.vimeo.com/video/\".concat(videoId, \"?\").concat(query);\n            }\n        },\n        {\n            key: \"getYoukuUrl\",\n            value: function getYoukuUrl(youku, videoId) {\n                var query = this.getQueryString(youku);\n                return \"//player.youku.com/embed/\".concat(videoId, \"?\").concat(query);\n            }\n        },\n        {\n            key: \"getVideoUrl\",\n            value: function getVideoUrl(opt, videoId) {\n                if (opt.channel === \"youtube\") {\n                    return this.getYoutubeUrl(opt.youtube, videoId);\n                }\n                if (opt.channel === \"vimeo\") {\n                    return this.getVimeoUrl(opt.vimeo, videoId);\n                }\n                if (opt.channel === \"youku\") {\n                    return this.getYoukuUrl(opt.youku, videoId);\n                }\n                if (opt.channel === \"custom\") {\n                    return opt.url;\n                }\n            }\n        },\n        {\n            key: \"getPadding\",\n            value: function getPadding(ratio) {\n                var arr = ratio.split(\":\");\n                var width = Number(arr[0]);\n                var height = Number(arr[1]);\n                var padding = height * 100 / width;\n                return \"\".concat(padding, \"%\");\n            }\n        },\n        {\n            key: \"getWidthFulfillAspectRatio\",\n            value: function getWidthFulfillAspectRatio(ratio, maxHeight, maxWidth) {\n                var arr = ratio.split(\":\");\n                var width = Number(arr[0]);\n                var height = Number(arr[1]);\n                // Height that fulfill the aspect ratio for maxWidth.\n                var videoHeight = maxWidth * (height / width);\n                if (maxHeight < videoHeight) {\n                    // when the height of the video is greater than the height of the window.\n                    // calculate the width that fulfill the aspect ratio for the height of the window.\n                    // ex: 16:9 aspect ratio\n                    // 16:9 = width : height\n                    // → width = 16 / 9 * height\n                    return Math.floor(width / height * maxHeight);\n                }\n                return \"100%\";\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this3 = this;\n                var modalVideoInnerStyle = {\n                    width: this.state.modalVideoWidth\n                };\n                var modalVideoIframeWrapStyle = {\n                    paddingBottom: this.getPadding(this.props.ratio)\n                };\n                return /*#__PURE__*/ _react.default.createElement(_CSSTransition.default, {\n                    classNames: this.props.classNames.modalVideoEffect,\n                    timeout: this.props.animationSpeed\n                }, function() {\n                    if (!_this3.state.isOpen) {\n                        return null;\n                    }\n                    return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                        className: _this3.props.classNames.modalVideo,\n                        tabIndex: \"-1\",\n                        role: \"dialog\",\n                        \"area-modal\": \"true\",\n                        \"aria-label\": _this3.props.aria.openMessage,\n                        onClick: _this3.closeModal,\n                        ref: function ref(node) {\n                            _this3.modal = node;\n                        },\n                        onKeyDown: _this3.updateFocus\n                    }, /*#__PURE__*/ _react.default.createElement(\"div\", {\n                        className: _this3.props.classNames.modalVideoBody\n                    }, /*#__PURE__*/ _react.default.createElement(\"div\", {\n                        className: _this3.props.classNames.modalVideoInner,\n                        style: modalVideoInnerStyle\n                    }, /*#__PURE__*/ _react.default.createElement(\"div\", {\n                        className: _this3.props.classNames.modalVideoIframeWrap,\n                        style: modalVideoIframeWrapStyle\n                    }, _this3.props.children || /*#__PURE__*/ _react.default.createElement(\"iframe\", {\n                        width: \"460\",\n                        height: \"230\",\n                        src: _this3.getVideoUrl(_this3.props, _this3.props.videoId),\n                        frameBorder: \"0\",\n                        allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n                        allowFullScreen: _this3.props.allowFullScreen,\n                        onKeyDown: _this3.updateFocus,\n                        ref: function ref(node) {\n                            _this3.modaliflame = node;\n                        },\n                        tabIndex: \"-1\"\n                    }), /*#__PURE__*/ _react.default.createElement(\"button\", {\n                        className: _this3.props.classNames.modalVideoCloseBtn,\n                        \"aria-label\": _this3.props.aria.dismissBtnMessage,\n                        ref: function ref(node) {\n                            _this3.modalbtn = node;\n                        },\n                        onKeyDown: _this3.updateFocus\n                    })))));\n                });\n            }\n        }\n    ], [\n        {\n            key: \"getDerivedStateFromProps\",\n            value: function getDerivedStateFromProps(props) {\n                return {\n                    isOpen: props.isOpen\n                };\n            }\n        }\n    ]);\n    return ModalVideo;\n}(_react.default.Component);\nexports[\"default\"] = ModalVideo;\nModalVideo.defaultProps = {\n    channel: \"youtube\",\n    isOpen: false,\n    youtube: {\n        autoplay: 1,\n        cc_load_policy: 1,\n        color: null,\n        controls: 1,\n        disablekb: 0,\n        enablejsapi: 0,\n        end: null,\n        fs: 1,\n        h1: null,\n        iv_load_policy: 1,\n        list: null,\n        listType: null,\n        loop: 0,\n        modestbranding: null,\n        origin: null,\n        playlist: null,\n        playsinline: null,\n        rel: 0,\n        showinfo: 1,\n        start: 0,\n        wmode: \"transparent\",\n        theme: \"dark\",\n        mute: 0\n    },\n    ratio: \"16:9\",\n    vimeo: {\n        api: false,\n        autopause: true,\n        autoplay: true,\n        byline: true,\n        callback: null,\n        color: null,\n        height: null,\n        loop: false,\n        maxheight: null,\n        maxwidth: null,\n        player_id: null,\n        portrait: true,\n        title: true,\n        width: null,\n        xhtml: false\n    },\n    youku: {\n        autoplay: 1,\n        show_related: 0\n    },\n    allowFullScreen: true,\n    animationSpeed: 300,\n    classNames: {\n        modalVideoEffect: \"modal-video-effect\",\n        modalVideo: \"modal-video\",\n        modalVideoClose: \"modal-video-close\",\n        modalVideoBody: \"modal-video-body\",\n        modalVideoInner: \"modal-video-inner\",\n        modalVideoIframeWrap: \"modal-video-movie-wrap\",\n        modalVideoCloseBtn: \"modal-video-close-btn\"\n    },\n    aria: {\n        openMessage: \"You just opened the modal video\",\n        dismissBtnMessage: \"Close the modal by clicking here\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-modal-video/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-modal-video/css/modal-video.css":
/*!************************************************************!*\
  !*** ./node_modules/react-modal-video/css/modal-video.css ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"54f8a2c82859\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwtdmlkZW8vY3NzL21vZGFsLXZpZGVvLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJiZWxseS1uZXh0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9kYWwtdmlkZW8vY3NzL21vZGFsLXZpZGVvLmNzcz9jYTE5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNTRmOGEyYzgyODU5XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-modal-video/css/modal-video.css\n");

/***/ })

};
;